% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{GD}
\alias{GD}
\title{GD model}
\usage{
GD(efflenraw, ecraw, countraw, spenum, attrs, arguments,
  maxiter = 10000L, miniter = 50L, batchsize = 1024L,
  details = FALSE)
}
\arguments{
\item{efflenraw}{A code{arma::vec} indicating the effect length of transcript.}

\item{ecraw}{A \code{character vector} and each element is a string with comma delimiter.}

\item{countraw}{A \code{arma::uvec} indicates the counts of ec.}

\item{spenum}{A \code{arma::uvec} indicated the transcript number in each species.}

\item{attrs}{Set active functions and optimization algorithms.
\itemize{
  \item \code{af}: "Softmax", "SoftPlus", "ISRU".
  \item \code{gd}: "Adagrad", "NAdagrad", "Adadelta", "RMSProp", "NRMSProp", "Adam", "NAdam", and "AMSGrad".
}}

\item{arguments}{Set advance parameters for \code{attrs}.
\itemize{
  \item \code{alpha}: used in "ISRU", default 0.01.
  \item \code{eta} and \code{decay}: Learning rate and decay rate, default 0.1 and 0.03, respectively. Used in "Adagrad", "NAdagrad", "RMSProp", "NRMSProp", "Adam", "NAdam", and "AMSGrad".
  \item \code{gamma}: used in "Adadelta", "RMSProp", and "NRMSProp", default 0.9.
  \item \code{velocity}: used in "NAdagrad" and "NRMSProp", default 0.9.
  \item \code{beta1} and \code{beta2}: used in "Adam" , "NAdam", "AdaMax", and "AMSGrad", default 0.9 and 0.999, respectively.
  \item \code{epsilon}: used in all optimization algorithms, default 1e-08.
  \item \code{assign0}: used in "AdaMax" indicating whether assign 0 to transcripts that having no mapped reads. \code{FALSE} is recommended for "AdaMax".
  \item \code{gradientAF} and \code{countsAF}: customized active function for gradient and counts.
}}

\item{maxiter}{The maximum iteration number with the default value of 10000.}

\item{miniter}{The minimum iteration number with the default value of 50.}

\item{batchsize}{Mini-batch size, it should be smaller or equal to \code{epochs}.}

\item{details}{A \code{bool} value.  When it is set as \code{true}, logistic likelihood and counts for each species in every iteration will be returned, otherwise \code{false}.}
}
\value{
A \code{List} indicates estimated counts of transcripts.
}
\description{
Gradient decent (GD) model for RNA-seq quantification.
}
\details{
GD model for RNA-seq quantification. The equivalence class (ec) with 0 counts are removed, because these counts have no contributes to the final results.
}
\examples{
## Single species
##    f1 f2 f3
## ec1 1 1 1
## ec2 0 1 1
## ec3 1 0 1
## ec4 1 0 0
## ec5 1 1 0
plist <- list(ec = c('0,1,2', '1,2', '0,2', '0', '0,1'), count = rep(1, 5), efflen = rep(1, 3))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'Adagrad'), list(eta = 0.5, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'NAdagrad'), list(eta = 0.5, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'Adadelta'), list(gamma = 0.8))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'RMSProp'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'NRMSProp'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'Adam'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'NAdam'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'AdaMax'), list(eta = 0.1, decay = 0.03, assign0 = FALSE))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'Softmax', opt = 'AMSGrad'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'SoftPlus', opt = 'NRMSProp'), list(eta = 0.1, decay = 0.03))
GD(plist$efflen, plist$ec, plist$count, spenum = 3,
   list(af = 'ISRU', opt = 'NRMSProp'), list(eta = 0.1, decay = 0.03))

## Two species
##    f1 f2 f3 f1' f2'
## ec1 1  1  0  0  1
## ec2 1  0  1  1  0
## ec3 0  1  1  0  0
## ec4 0  0  0  1  1
## ec5 1  0  1  0  1
## ec6 1  1  0  0  0
plist <- list(ec = c('0,1,4', '0,2,3', '1,2', '3,4', '0,2,4', '0,1'),
              count = rep(1, 6), efflen = rep(1, 5))
GD(plist$efflen, plist$ec, plist$count, spenum = c(3, 2),
   list(af = 'Softmax', opt = 'NRMSProp'), list(eta = 0.1, decay = 0.03), batchsize = 1024)
}
\author{
Yulong Niu \email{yulong.niu@hotmail.com}
}
