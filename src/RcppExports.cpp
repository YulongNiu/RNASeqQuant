// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EMSingle
arma::vec EMSingle(arma::vec& prob, const std::vector<arma::vec>& efflen, const std::vector<arma::uvec>& ec, arma::uvec& count);
RcppExport SEXP _RNASeqEM_EMSingle(SEXP probSEXP, SEXP efflenSEXP, SEXP ecSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type efflen(efflenSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::uvec>& >::type ec(ecSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type count(countSEXP);
    rcpp_result_gen = Rcpp::wrap(EMSingle(prob, efflen, ec, count));
    return rcpp_result_gen;
END_RCPP
}
// Estcount2Prob
arma::vec Estcount2Prob(arma::vec& estcount, arma::uvec& spenum);
RcppExport SEXP _RNASeqEM_Estcount2Prob(SEXP estcountSEXP, SEXP spenumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type estcount(estcountSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type spenum(spenumSEXP);
    rcpp_result_gen = Rcpp::wrap(Estcount2Prob(estcount, spenum));
    return rcpp_result_gen;
END_RCPP
}
// Strsplit
arma::uvec Strsplit(const std::string& s, char delim);
RcppExport SEXP _RNASeqEM_Strsplit(SEXP sSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< char >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(Strsplit(s, delim));
    return rcpp_result_gen;
END_RCPP
}
// SplitEC
std::vector<arma::uvec> SplitEC(const Rcpp::CharacterVector& ec);
RcppExport SEXP _RNASeqEM_SplitEC(SEXP ecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type ec(ecSEXP);
    rcpp_result_gen = Rcpp::wrap(SplitEC(ec));
    return rcpp_result_gen;
END_RCPP
}
// MatchEfflen
std::vector<arma::vec> MatchEfflen(const std::vector<arma::uvec>& ecvec, const arma::vec& efflen);
RcppExport SEXP _RNASeqEM_MatchEfflen(SEXP ecvecSEXP, SEXP efflenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::uvec>& >::type ecvec(ecvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type efflen(efflenSEXP);
    rcpp_result_gen = Rcpp::wrap(MatchEfflen(ecvec, efflen));
    return rcpp_result_gen;
END_RCPP
}
// IdxSpenum
arma::uvec IdxSpenum(const arma::uvec& spenum);
RcppExport SEXP _RNASeqEM_IdxSpenum(SEXP spenumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type spenum(spenumSEXP);
    rcpp_result_gen = Rcpp::wrap(IdxSpenum(spenum));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RNASeqEM_EMSingle", (DL_FUNC) &_RNASeqEM_EMSingle, 4},
    {"_RNASeqEM_Estcount2Prob", (DL_FUNC) &_RNASeqEM_Estcount2Prob, 2},
    {"_RNASeqEM_Strsplit", (DL_FUNC) &_RNASeqEM_Strsplit, 2},
    {"_RNASeqEM_SplitEC", (DL_FUNC) &_RNASeqEM_SplitEC, 1},
    {"_RNASeqEM_MatchEfflen", (DL_FUNC) &_RNASeqEM_MatchEfflen, 2},
    {"_RNASeqEM_IdxSpenum", (DL_FUNC) &_RNASeqEM_IdxSpenum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RNASeqEM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
